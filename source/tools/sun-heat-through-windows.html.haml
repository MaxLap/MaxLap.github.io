---
title: Sun heat through windows
layout: 'blog_wide'
---
-# might be interesting: https://stackoverflow.com/questions/61336948/calculating-the-cardinal-direction-of-a-smartphone-with-js

= javascript_include_tag "/javascripts/utils.js"
= javascript_include_tag "https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js"
= javascript_include_tag "/javascripts/sun_heat_through_windows.js"
= javascript_include_tag "https://cdn.jsdelivr.net/npm/chart.js@4.3.3/dist/chart.umd.min.js"
= javascript_include_tag "https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@3.0.1/dist/chartjs-plugin-annotation.min.js"

:javascript
  Chart.defaults.interaction.intersect = false
  Chart.defaults.interaction.mode = 'index'
  Chart.defaults.pointRadius = 1
  Chart.defaults.plugins.legend.display = false
  Chart.defaults.plugins.title.display = true
  Chart.defaults.animation.duration = 300
  Chart.defaults.scales.y = { min: 0 }

  window.chart_infos = {
    latitude: 45.5,
    orientation: 180,
    date: new Date(),
    shgc: 0.5,
    area_m2: 1,
    area_string: '1m²'
  }

  window.ChartDefaultsYearly = {
    data: {
      labels: days_of_year_labels,
    },
    options: {
      plugins: {
        annotation: {
          annotations: {
            current_day: {
              type: 'line',
              borderColor: 'black',
              borderWidth: 1,
              label: {
                backgroundColor: 'rgba(0,0,0,0)',
                position: 'end',
                color: 'black',
                content: function() { return dateStringWithoutYear(chart_infos.date) },
                display: true,
              },
              drawTime: 'beforeDatasetsDraw',
              scaleID: 'x',
              value: function() { return dayOfYear(chart_infos.date) - 1 },
            }
          }
        },
      },
      scales: {
        x: {
          ticks: {
            callback: ticksCallbackFirstOfEachMonth,
          }
        }
      }
    }
  }

  window.ChartDefaultsDaily = {
    data: {
      labels: hours_of_day_by_15_mins_labels,
    },
    options: {
      plugins: {
      },
      scales: {
        x: {
          ticks: {
            callback: ticksCallbackRoundHours,
          }
        }
      }
    }
  }

  window.ChartDefaultsIrradiance = {
    options: {
      scales: {
        y: {
          max: function() { return 1100 * chart_infos.shgc },
          title: {
            display: true,
            text: 'W/m²',
            font: {
              style: 'normal',
            },
          },
          ticks: {
            count: 12,
            callback: ticksCallbackRoundValues,
          }
        },
      }
    }
  }

  window.ChartDefaultsIrradianceWithSize = {
    options: {
      scales: {
        y: {
          max: function() { return 1100 * chart_infos.area_m2 * chart_infos.shgc },
          title: {
            display: true,
            text: 'Watts',
            font: {
              style: 'normal',
            },
          },
          ticks: {
            count: 12,
            callback: ticksCallbackRoundValues,
          }
        },
      }
    }
  }

.two-columns-page-wrapper
  %div{style: "padding-right: 5px"}
    :content
      # Sun heat through window calculator

      How much heat from the sunlight gets through your windows? This calculator aims to give you an idea.

      Just provide a few bits of information:

      Your latitude:
      <input type="number" name="latitude" oninput="updateInputs()" value="45.5" />
      <button onclick="navigator.geolocation.getCurrentPosition(setLatitudeFromGeolocationPosition, function(){}, { maximumAge: 60000 });">
      Use my location (if available)
      </button>

      Window facing direction (from inside):
      <select name="window_main_orientation_angle" oninput="updateInputs()">
        <option value=0>North</Option>
        <option value=45>North-east</Option>
        <option value=90>East</Option>
        <option value=135>South-East</Option>
        <option value=180 selected>South</Option>
        <option value=225>South-West</Option>
        <option value=270>West</Option>
        <option value=315>North-West</Option>
      </select>

      (Optional) to be more precise, specify how "offset" your window is to the selected cardinal direction.
      This is an angle, positive number means the window faces more to the right (clock-wise on a map)
      <input type="number" name="window_orientation_offset_angle" value="0" oninput="updateInputs()"/>

      Overall angle relative to north: <input type="number" name="window_final_orientation_angle" value="180" readonly disabled=disabled/>

      Date to focus on: <input type="date" name="date" value="" oninput="updateInputs()"/> (The year doesn't matter)

      The specific heat gain coefficient of your window (SHGC): <input type="number" name="shgc" value="0.5" oninput="updateInputs()"/>
      Usually a number between 0.2 and 0.8. This directly multiplies with the sunlight strength. The shape of the charts
      remains the same. the SHGC only affects the numbers on the left axis.

      Area of the window (or fill the HxW below):
      <input type="number" name="window_area" value="1" onchange="updateInputs()" style="width: 100px"/>
      <select name="window_area_unit" oninput="updateInputs()">
        <option value='cm' data-ratio=0.0001>cm²</Option>
        <option value='m' data-ratio=1 selected>m²</Option>
        <option value='in' data-ratio=0.00064516>in²</Option>
        <option value='ft' data-ratio=0.092903>ft²</Option>
      </select>
      <br/>
      Height
      <input type="number" name="window_height" value="" onchange="updateAreaFromDimensions()" style="width: 100px"/>
      x Width
      <input type="number" name="window_width" value="" onchange="updateAreaFromDimensions()" style="width: 100px"/>
      <select name="window_dimensions_unit" oninput="updateAreaFromDimensions()">
        <option value='cm'>cm</Option>
        <option value='m'>m</Option>
        <option value='in'>in</Option>
        <option value='ft'>ft</Option>
      </select>
      <br/>
      If you have multiple windows in the same direction, you can add their area.

      ### Results

      Note: The numbers and charts may not be intuitive because there are multiple effects interacting. I might make a blog post to
      explain them at one point.

      (On wide screens, the results show on the right.)

  %div{style: "border-left: 1px solid lightgrey; padding-left: 5px"}
    :content
      On a clear day on that date, here is how much sun energy is getting inside through the window:

      <div style="height: 35vh">
        <canvas id="w_through_day"></canvas>
      </div>

    :javascript
      new Chart(document.getElementById('w_through_day'), dupMergeOptions(ChartDefaultsDaily,  {
        type: 'line',
        data: {
          datasets: [{
            label: 'Watts (W) through window at that moment',
            data: refreshableArray(function() {
              return hoursOfDayBy15MinsDataset(function(hour) {
                return chart_infos.shgc * overallSunStrengthThroughFrameMultiplierAt(chart_infos.date, hour, chart_infos.latitude, chart_infos.orientation) * solar_constant_w * chart_infos.area_m2
              })
            }),
          }]
        },
        options: {
          animation: false,
          maintainAspectRatio: false,
          plugins: {
            title: {
              text: 'Energy through window throughout a clear day',
            }
          },
          scales: {
            y: {
              title: {
                display: true,
                text: 'Watts',
                font: {
                  style: 'normal',
                },
              },
            }
          }
        }
      }));

    :content
      And here is the total energy coming through for each day of the day for the window:
      <div style="height: 35vh">
        <canvas id="kWh_through_year"></canvas>
      </div>
      You can click this chart to change the date of the other chart.

    :javascript
      new Chart(document.getElementById('kWh_through_year'), dupMergeOptions(ChartDefaultsYearly, {
        type: 'line',
        data: {
          datasets: [{
            label: 'Total kWh through window on that day',
            data: refreshableArray(function() {
              return daysOfYearDataset(function(date) {
                return chart_infos.shgc * totalSunEnergyThroughWindowMultiplierAt(date, chart_infos.latitude, chart_infos.orientation) * solar_constant_w * chart_infos.area_m2
              })
            }),
          }]
        },
        options: {
          animation: false,
          maintainAspectRatio: false,
          onClick: function(event, elements, chart) {
            if (elements[0]) {
              const i = elements[0].index;
              document.querySelector('input[name="date"]').valueAsDate = new Date(chart_infos.date.getFullYear(), 0, i + 1)
              updateInputs()
            }
          },
          plugins: {
            title: {
              text: 'Daily total energy through the window assuming clear days, throughout the year',
            },
          },
          scales: {
            y: {
              title: {
                display: true,
                text: 'kWh',
                font: {
                  style: 'normal',
                },
              },
            }
          }
        }
      }));


:javascript
  document.querySelector('input[name="date"]').valueAsDate = chart_infos.date

  function setLatitudeFromGeolocationPosition(pos) {
    const crd = pos.coords;
    document.querySelector('input[name="latitude"]').value = crd.latitude
    updateResults()
  }

  function updateInputs() {
    chart_infos.latitude = document.querySelector('input[name="latitude"]').value || 0;
    let orientation_angle = parseInt(document.querySelector('select[name="window_main_orientation_angle"]').value) || 0;
    orientation_angle += parseInt(document.querySelector('input[name="window_orientation_offset_angle"]').value) || 0;
    orientation_angle = orientation_angle % 360
    document.querySelector('input[name="window_final_orientation_angle"]').value = orientation_angle

    chart_infos.orientation = orientation_angle

    let date = document.querySelector('input[name="date"]').valueAsDate
    if (date) {
      chart_infos.date = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate())
    } else {
      chart_infos.date = new Date()
    }

    let shgc = parseFloat(document.querySelector('input[name="shgc"]').value)
    if (shgc > 1) {
      shgc = 1.0
    } else if (shgc < 0) {
      shgc = 0
    } else if (!shgc) {
      shgc = 0.5
    }
    chart_infos.shgc = shgc

    let window_area = parseFloat(document.querySelector('input[name="window_area"]').value)

    chart_infos.area = window_area
    chart_infos.area_unit = document.querySelector('select[name="window_area_unit"]').selectedOptions[0].text
    chart_infos.area_m2 = window_area * parseFloat(document.querySelector('select[name="window_area_unit"]').selectedOptions[0].dataset['ratio'])

    updateRefreshableCharts()
  }

  function updateAreaFromDimensions() {
    let window_height = parseFloat(document.querySelector('input[name="window_height"]').value)
    let window_width = parseFloat(document.querySelector('input[name="window_width"]').value)
    if (!window_height || !window_width) {
      return
    }

    let area = window_height * window_width
    let dimensions_unit = document.querySelector('select[name="window_dimensions_unit"]').value

    if (dimensions_unit == 'cm') {
      dimensions_unit = 'm'
      area *= 0.0001
    } else if (dimensions_unit == 'in') {
      dimensions_unit = 'ft'
      area /= 144
    }

    document.querySelector('input[name="window_area"]').value = area
    document.querySelector('select[name="window_area_unit"]').value = dimensions_unit
    chart_infos.area_string = area + dimensions_unit + '²'

    updateInputs()
  }


