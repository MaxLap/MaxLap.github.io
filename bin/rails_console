#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/inline"

gemfile(true) do
  source "https://rubygems.org"

  git_source(:github) { |repo| "https://github.com/#{repo}.git" }

  # Activate the gem you are reporting the issue against.
  gem "activerecord", "6.0.3"
  gem "sqlite3"
end

require "active_record"
require "minitest/autorun"
require "logger"
require "irb"

# This connection will do for database-independent bug reports.
ActiveRecord::Base.establish_connection(adapter: "sqlite3", database: ":memory:")
ActiveRecord::Base.logger = Logger.new(STDOUT)

ActiveRecord::Schema.define do
  create_table :posts, force: true do |t|
    t.timestamps
  end

  create_table :comments, force: true do |t|
    t.integer :post_id
    t.string :content
    t.timestamps
  end
end

class Post < ActiveRecord::Base
  has_many :comments
end

class Comment < ActiveRecord::Base
  belongs_to :post
end


p = Post.create!
p.comments.create!(content: 'hello')
p.comments.create!(content: 'world')

posts = Post.joins(:comments).where(comments: {content: 'hello'})

posts.first.comments
# How many comments are returned? 2 as expected

posts.includes(:comments).first.comments
# How many comments are returned? 1
posts.includes(:comments).first.comments.count
# => 2
posts.includes(:comments).first.comments.size
# => 1



IRB.start(__FILE__)
